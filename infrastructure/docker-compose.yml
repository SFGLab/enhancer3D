services:
    bucket:
        image: minio/minio:${MINIO_VERSION}
        command: ["server", "/data", "--address", ":9000", "--console-address", ":9001"]
        expose:
            - "9000"
            - "9001"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 10s
            timeout: 10s
            retries: 5
        volumes:
            - minio_data:/data
        environment:
            - MINIO_ROOT_USER=${MINIO_ROOT_USER}
            - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
        networks:
            - enhancer3d-network

    mongo:
        image: mongo:${MONGO_VERSION}
        container_name: mongo
        command: ["--config", "/etc/mongod.conf"]
        expose:
            - "27017"
        healthcheck:
            test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
            interval: 10s
            timeout: 10s
            retries: 5
        volumes:
            - mongo_data:/data/db
            - ./config/mongo/mongod.conf:/etc/mongod.conf:ro
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
        networks:
            - enhancer3d-network

    temporal_elasticsearch:
        image: elasticsearch:${ELASTICSEARCH_VERSION}
        expose:
            - "9200"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9200"]
            interval: 10s
            timeout: 10s
            retries: 5
        volumes:
            - temporal_elasticsearch_data:/var/lib/elasticsearch/data
        environment:
            - cluster.routing.allocation.disk.threshold_enabled=true
            - cluster.routing.allocation.disk.watermark.low=512mb
            - cluster.routing.allocation.disk.watermark.high=256mb
            - cluster.routing.allocation.disk.watermark.flood_stage=128mb
            - discovery.type=single-node
            - ES_JAVA_OPTS=-Xms256m -Xmx256m
            - xpack.security.enabled=false
        networks:
            - enhancer3d-network

    temporal_postgresql:
        image: postgres:${POSTGRES_VERSION}
        expose:
            - "5432"
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
            interval: 10s
            timeout: 10s
            retries: 5
        volumes:
            - temporal_postgresql_data:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        networks:
            - enhancer3d-network

    temporal:
        image: temporalio/auto-setup:${TEMPORAL_VERSION}
        expose:
            - "7233"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:7233/health"]
            interval: 10s
            timeout: 10s
            retries: 5
        volumes:
            - ./config/temporal:/etc/temporal/config/dynamicconfig
        environment:
            - DB=postgres12
            - DB_PORT=5432
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PWD=${POSTGRES_PASSWORD}
            - POSTGRES_SEEDS=temporal_postgresql
            - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/deployment.yml
            - ENABLE_ES=true
            - ES_SEEDS=temporal_elasticsearch
            - ES_VERSION=v7
        networks:
            - enhancer3d-network
        depends_on:
            - temporal_postgresql
            - temporal_elasticsearch

    temporal_ui:
        image: temporalio/ui:${TEMPORAL_UI_VERSION}
        expose:
            - "8080"
        environment:
            - TEMPORAL_ADDRESS=temporal:7233
            - TEMPORAL_CORS_ORIGINS=${TEMPORAL_CORS_ORIGINS}
        networks:
            - enhancer3d-network
        depends_on:
            - temporal

    app_repacker:
        build:
            context: ..
            dockerfile: infrastructure/app_repacker.Dockerfile
        environment:
            - BUCKET_ENDPOINT=http://bucket:9000
            - BUCKET_ACCESS_KEY=${MINIO_ACCESS_KEY}
            - BUCKET_SECRET_KEY=${MINIO_SECRET_KEY}
            - TEMPORAL_ENDPOINT=temporal:7233
            - TEMPORAL_NAMESPACE=default
            - MONGO_CONNECTION_STRING=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/
        depends_on:
            - temporal
        networks:
            - enhancer3d-network
        restart: on-failure

    app_calculator:
        build:
            context: ..
            dockerfile: infrastructure/app_calculator.Dockerfile
        environment:
            - BUCKET_ENDPOINT=http://bucket:9000
            - BUCKET_ACCESS_KEY=${MINIO_ACCESS_KEY}
            - BUCKET_SECRET_KEY=${MINIO_SECRET_KEY}
            - TEMPORAL_ENDPOINT=temporal:7233
            - TEMPORAL_NAMESPACE=default
            - MONGO_CONNECTION_STRING=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/
        depends_on:
            - temporal
        networks:
            - enhancer3d-network
        restart: on-failure

    spark-master:
        build:
            context: ..
            dockerfile: infrastructure/spark.Dockerfile
        expose:
            - "8080"
            - "7077"
        environment:
            - SPARK_MODE=master
            - SPARK_MASTER_HOST=spark-master
            - SPARK_RPC_AUTHENTICATION_ENABLED=${SPARK_RPC_AUTHENTICATION_ENABLED}
            - SPARK_RPC_AUTHENTICATION_SECRET=${SPARK_RPC_AUTHENTICATION_SECRET}
            - SPARK_RPC_ENCRYPTION=${SPARK_RPC_ENCRYPTION}
            - SPARK_LOCAL_STORAGE_ENCRYPTION=${SPARK_LOCAL_STORAGE_ENCRYPTION}
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
            interval: 10s
            timeout: 10s
            retries: 5
        volumes:
            - ../:/work
        networks:
            - enhancer3d-network

    spark-worker:
        build:
            context: ..
            dockerfile: infrastructure/spark.Dockerfile
        expose:
            - "8081"
        environment:
            - SPARK_MODE=worker
            - SPARK_MASTER=spark://spark-master:7077
            - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
            - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
            - SPARK_RPC_AUTHENTICATION_ENABLED=${SPARK_RPC_AUTHENTICATION_ENABLED}
            - SPARK_RPC_AUTHENTICATION_SECRET=${SPARK_RPC_AUTHENTICATION_SECRET}
            - SPARK_RPC_ENCRYPTION=${SPARK_RPC_ENCRYPTION}
            - SPARK_LOCAL_STORAGE_ENCRYPTION=${SPARK_LOCAL_STORAGE_ENCRYPTION}
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8081" ]
            interval: 10s
            timeout: 10s
            retries: 5
        depends_on:
            - spark-master
        volumes:
            - ../:/work
        networks:
            - enhancer3d-network

    livy:
        container_name: livy
        build:
            context: ..
            dockerfile: infrastructure/livy.Dockerfile
        volumes:
            - ./config/livy/spark_defaults.conf:/opt/livy/conf/spark-defaults.conf
            - ../:/work
        depends_on:
            - spark-master
        networks:
            - enhancer3d-network

    jupyter:
        container_name: jupyter
        build:
            context: ..
            dockerfile: infrastructure/jupyter.Dockerfile
        depends_on:
            - spark-master
            - livy
        environment:
            - JUPYTER_ENABLE_LAB=yes
            - JUPYTER_TOKEN=${JUPYTER_TOKEN}
        volumes:
            - ../:/home/jovyan/work
        networks:
            - enhancer3d-network

networks:
    enhancer3d-network:
        driver: bridge

volumes:
    minio_data:
    mongo_data:
    temporal_elasticsearch_data:
    temporal_postgresql_data:
